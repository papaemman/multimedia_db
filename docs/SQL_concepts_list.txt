==========================
		ABOUT SQL 
Structured Query Language
==========================


- SQL can execute queries against a database
- SQL can retrieve data from a database
- SQL can insert/update/delete records in a database
- SQL can create new databases
- SQL can create new tables in a database
- SQL can create stored procedures in a database
- SQL can create views in a database
- SQL can set permissions on tables, procedures, and views




// DBMS (Database Managment systems) //

1. MySQL
2. PostgreSQL


// SQL Commands //

1.  SELECT
2.  SELECT DISTINCT
3. 	SELECT TOP
4.  SELECT INTO 
5.  WHERE
6.  AND, OR, NOT
7.  ORDER BY
8.  COUNT, AVG, SUM, MIN, MAX
9.  INSERT INTO, INSERT INTO (SELECT)
10. IS NULL
11. IFNULL, ISNULL COALESCE, NVL
12. UPDATE
13. DELETE
15. LIKE
16. IN
17. BETWEEN
18. AS
19. INNER JOIN, LEFT JOIN, RIGHT JOIN, FULL JOIN
20. UNION, UNION ALL
21. GROUP BY
22. HAVING
23. EXISTS
24. ANY, ALL
25. CASE
26. ASC, DESC


// SQL Database //

1. CREATE DATABASE
2. DROP DATABASE
3. BACKUP DATABASE
4. CREATE TABLE
5. DROP TABLE
6. ALTER TABLE (ADD, DROP COLUMN, ALTER COLUMN, ALTER TABLE)
7. CREATE INDEX
8. CREATE VIEW

9. Constraints
  - NOT NULL
  - UNIQUE
  - PRIMARY KEY
  - FOREIGN KEY
  - CHECK
  - DEFAULT
  - AUTO_INCREMENT

10. DROP


--> Stored Procedures

CREATE PROCEDURE procedure_name
AS
sql_statement
GO;


--> Comments

--Select all:


--------------------------------------------------------

Indexes are used to retrieve data from the database more quickly than otherwise. The users cannot see the indexes, they are just used to speed up searches/queries.

Note: Updating a table with indexes takes more time than updating a table without (because the indexes also need an update). So, only create indexes on columns that will be frequently searched against.

--------------------------------------------------------

// SQL Code Snippets //


-> Create a new Table



-> Insert a new value 

INSERT INTO public."customers"("name", "email")
VALUES ('Mary Brown', 'mary@brown.com')



-> Select rows

SELECT name, email FROM public.customers

SELECT * FROM public.customers
ORDER BY id ASC

SELECT name AS "Customer Name" FROM public.customers

SELECT * FROM public.customers
WHERE AGE>18


SELECT * FROM public.customers
WHERE name LIKE 'John Elder'


-> Self Join
The following SQL statement matches customers that are from the same city:

SELECT A.CustomerName AS CustomerName1, B.CustomerName AS CustomerName2, A.City
FROM Customers A, Customers B
WHERE A.CustomerID <> B.CustomerID
AND A.City = B.City
ORDER BY A.City;



-> Groupby + Count
The following SQL statement lists the number of customers in each country:

SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country;



-> Case

SELECT OrderID, Quantity,
CASE
    WHEN Quantity > 30 THEN 'The quantity is greater than 30'
    WHEN Quantity = 30 THEN 'The quantity is 30'
    ELSE 'The quantity is under 30'
END AS QuantityText
FROM OrderDetails;
-------------------------------------------------------------

// SQL Concepts //


--> Basic:

1. SELECT and WHERE for filtering and selection
2. COUNT, SUM, MAX, GROUP BY, HAVING for aggregating data"
3. DISTINCT, COUNT DISTINCT for producing useful distinct lists and distinct aggregates
4. OUTER (e.g. LEFT) and INNER JOIN when/where to use them
5. Strings and time conversions
6. UNION and UNION ALL.

--> Intermediate:

1. DML/DDL/DCL concepts
2. Handling NULLs creatively (e.g. with COALESCE)
3. Subqueries and the impact of subqueries on efficiency of the query
4. Temporary tables
5. Self joins
6. Window functions like PARTITION, LEAD, LAG, NTILE
7. UDFs (user defined functions)
8. Use of indexes in querying to make operations faster.


--> Advanced:

1. Recursive CTEs
2. Dynamic SQL generation
3. Query optimization
4. Materialized views
5. Clustered index
6. Cursors
